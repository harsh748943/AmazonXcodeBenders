//package com.example.amazonxcodebenders;
//
//public class Expense {
//    private String category;
//    private double amount;
//    private long timestamp;
//
//    private String description;
//
//
//
//
//    public Expense(String category, double amount, long timestamp, String description) {
//        this.category = category;
//        this.amount = amount;
//        this.timestamp = timestamp;
//        this.description = description;
//    }
//    public String getCategory() {
//        return category;
//    }
//
//    public String getDescription(){ return description; }
//
//    public double getAmount() {
//        return amount;
//    }
//
//    public long getTimestamp() {
//        return timestamp;
//    }
//}
//

package com.example.amazonxcodebenders.budgeting;

import com.google.firebase.database.IgnoreExtraProperties; // Optional, but good practice

// @IgnoreExtraProperties helps prevent crashes if your Firebase data
// has fields not defined in this Java class (e.g., if you add fields later)
@IgnoreExtraProperties
public class Expense {

    // IMPORTANT: Firebase requires a public no-argument constructor for deserialization.
    // If you remove this, Firebase will throw an error when trying to read data.
    public Expense() {
        // Default constructor required for calls to DataSnapshot.getValue(Expense.class)
    }

    private String id; // To store the unique key generated by Firebase (push().getKey())
    private String category;
    private double amount;
    private long timestamp;
    private String description;
    private String type; // e.g., "expense", "income"
    private String paymentMethod; // e.g., "Cash", "UPI", "Credit Card", "Bank Transfer"
    private String source; // e.g., "manual", "SMS", "bank_api"

    // Full constructor for when you create a new Expense object with all details
    public Expense(String id, String category, double amount, long timestamp, String description,
                   String type, String paymentMethod, String source) {
        this.id = id;
        this.category = category;
        this.amount = amount;
        this.timestamp = timestamp;
        this.description = description;
        this.type = type;
        this.paymentMethod = paymentMethod;
        this.source = source;
    }

    // --- Getters ---
    // All fields that you want to read from Firebase must have a public getter.
    public String getId() {
        return id;
    }

    public String getCategory() {
        return category;
    }

    public double getAmount() {
        return amount;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public String getDescription() {
        return description;
    }

    public String getType() {
        return type;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public String getSource() {
        return source;
    }

    // --- Setters ---
    // All fields that you want to write to Firebase (or allow Firebase to write to
    // during deserialization) must have a public setter.
    public void setId(String id) {
        this.id = id;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setType(String type) {
        this.type = type;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public void setSource(String source) {
        this.source = source;
    }
}